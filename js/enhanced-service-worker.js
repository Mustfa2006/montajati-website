// Service Worker ูุญุณู ูููููุน
const CACHE_NAME = 'montajati-web-v1.0.0';
const API_CACHE_NAME = 'montajati-api-v1.0.0';

// ุงููููุงุช ุงููุทููุจ ุชุฎุฒูููุง ูุคูุชุงู
const STATIC_CACHE_URLS = [
  '/',
  '/index.html',
  '/main.dart.js',
  '/flutter.js',
  '/flutter_bootstrap.js',
  '/manifest.json',
  '/js/web-config.js',
  '/icons/Icon-192.png',
  '/icons/Icon-512.png'
];

// ุชุซุจูุช Service Worker
self.addEventListener('install', (event) => {
  console.log('๐ง ุชุซุจูุช Service Worker ูููููุน');
  
  event.waitUntil(
    caches.open(CACHE_NAME)
      .then((cache) => {
        console.log('๐ฆ ุชุฎุฒูู ุงููููุงุช ุงูุฃุณุงุณูุฉ');
        return cache.addAll(STATIC_CACHE_URLS);
      })
      .then(() => {
        console.log('โ ุชู ุชุซุจูุช Service Worker ุจูุฌุงุญ');
        return self.skipWaiting();
      })
  );
});

// ุชูุนูู Service Worker
self.addEventListener('activate', (event) => {
  console.log('โก ุชูุนูู Service Worker');
  
  event.waitUntil(
    caches.keys().then((cacheNames) => {
      return Promise.all(
        cacheNames.map((cacheName) => {
          if (cacheName !== CACHE_NAME && cacheName !== API_CACHE_NAME) {
            console.log('๐๏ธ ุญุฐู cache ูุฏูู:', cacheName);
            return caches.delete(cacheName);
          }
        })
      );
    }).then(() => {
      console.log('โ ุชู ุชูุนูู Service Worker ุจูุฌุงุญ');
      return self.clients.claim();
    })
  );
});

// ุงูุชุนุงูู ูุน ุงูุทูุจุงุช
self.addEventListener('fetch', (event) => {
  const request = event.request;
  const url = new URL(request.url);
  
  // ุชุฌุงูู ุทูุจุงุช Chrome extensions
  if (url.protocol === 'chrome-extension:') {
    return;
  }
  
  // ุงูุชุนุงูู ูุน ุทูุจุงุช API
  if (url.pathname.startsWith('/api/')) {
    event.respondWith(handleApiRequest(request));
    return;
  }
  
  // ุงูุชุนุงูู ูุน ุงููููุงุช ุงูุซุงุจุชุฉ
  event.respondWith(handleStaticRequest(request));
});

// ุงูุชุนุงูู ูุน ุทูุจุงุช API
async function handleApiRequest(request) {
  try {
    // ูุญุงููุฉ ุงูุญุตูู ุนูู ุงูุงุณุชุฌุงุจุฉ ูู ุงูุดุจูุฉ ุฃููุงู
    const networkResponse = await fetch(request);
    
    // ุชุฎุฒูู ุงูุงุณุชุฌุงุจุฉ ุงููุงุฌุญุฉ ูุคูุชุงู
    if (networkResponse.ok) {
      const cache = await caches.open(API_CACHE_NAME);
      cache.put(request, networkResponse.clone());
    }
    
    return networkResponse;
  } catch (error) {
    console.log('๐ ูุดู ุทูุจ ุงูุดุจูุฉุ ูุญุงููุฉ ุงุณุชุฎุฏุงู Cache:', request.url);
    
    // ูู ุญุงูุฉ ูุดู ุงูุดุจูุฉุ ุงุณุชุฎุฏู Cache
    const cachedResponse = await caches.match(request);
    if (cachedResponse) {
      return cachedResponse;
    }
    
    // ุฅุฑุฌุงุน ุงุณุชุฌุงุจุฉ ุฎุทุฃ ูุฎุตุตุฉ
    return new Response(JSON.stringify({
      success: false,
      message: 'ูุง ููุฌุฏ ุงุชุตุงู ุจุงูุฅูุชุฑูุช',
      cached: false
    }), {
      status: 503,
      headers: { 'Content-Type': 'application/json' }
    });
  }
}

// ุงูุชุนุงูู ูุน ุงููููุงุช ุงูุซุงุจุชุฉ
async function handleStaticRequest(request) {
  try {
    // ูุญุงููุฉ ุงูุญุตูู ูู Cache ุฃููุงู
    const cachedResponse = await caches.match(request);
    if (cachedResponse) {
      return cachedResponse;
    }
    
    // ุฅุฐุง ูู ุชูุฌุฏ ูู Cacheุ ุฌูุจ ูู ุงูุดุจูุฉ
    const networkResponse = await fetch(request);
    
    // ุชุฎุฒูู ุงูุงุณุชุฌุงุจุฉ ูู Cache
    if (networkResponse.ok) {
      const cache = await caches.open(CACHE_NAME);
      cache.put(request, networkResponse.clone());
    }
    
    return networkResponse;
  } catch (error) {
    console.log('โ ูุดู ูู ุฌูุจ ุงูููู:', request.url);
    
    // ุฅุฑุฌุงุน ุตูุญุฉ offline ูุฎุตุตุฉ
    if (request.destination === 'document') {
      return caches.match('/index.html');
    }
    
    return new Response('ุงูููู ุบูุฑ ูุชุงุญ', { status: 404 });
  }
}

// ุงูุชุนุงูู ูุน ุฑุณุงุฆู ูู ุงูุชุทุจูู ุงูุฑุฆูุณู
self.addEventListener('message', (event) => {
  console.log('๐จ ุฑุณุงูุฉ ูู ุงูุชุทุจูู:', event.data);
  
  if (event.data && event.data.type === 'SKIP_WAITING') {
    self.skipWaiting();
  }
  
  if (event.data && event.data.type === 'CLEAR_CACHE') {
    clearAllCaches();
  }
});

// ูุณุญ ุฌููุน ุงูู Caches
async function clearAllCaches() {
  try {
    const cacheNames = await caches.keys();
    await Promise.all(
      cacheNames.map(cacheName => caches.delete(cacheName))
    );
    console.log('๐๏ธ ุชู ูุณุญ ุฌููุน ุงูู Caches');
  } catch (error) {
    console.error('โ ุฎุทุฃ ูู ูุณุญ ุงูู Caches:', error);
  }
}

console.log('โ ุชู ุชุญููู Enhanced Service Worker ูููููุน');
